from sage.all import *
x,y,z=var('x y z')

listk=[46, 54, 56, 70, 86, 88]

Vone(x,y,z)=y*z-x
Vtwo(x,y,z)=x*z-y
Vthree(x,y,z)=y*x-z

f(x)=log((x+sqrt(x^2-4))/2)
term(x,y,z)=(3/pi^2)*(f(x)+f(y)-f(z))/(f(x)*f(y)*f(z))
iterm(x,y,z)=(3/pi^2)*(1/(f(x)*f(y)))

data = []

for k in listk:
    M(x,y,z)=x**2+y**2+z**2-x*y*z-k

    a,b,c=solve([x**3-3*x**2+k==0],x)
    d= floor(c.rhs().n())

    e=floor(sqrt(-k+9))

    cn=0
    points=[]

    for i in range(3, d+1):
        for j in range(i,e+1):
            solutions = solve(M(i,j,z)==0, z, solution_dict=True)
            integer_solutions = [sol[z] for sol in solutions if sol[z].is_integer() and sol[z]>=j and sol[z]<=i*j/2]
            if integer_solutions:
                point=(i,j, integer_solutions[0])
                cn=cn+1
                points.append(point)

    #print("k=", k, "has class number", cn, "and fundamental solutions", points)


    allsol=set(tuple(sol) for sol in points)

    finalC=0
    
    for sol in points:
        one=sorted([abs(Vone(sol[0],sol[1],sol[2])),abs(sol[1]),abs(sol[2])])
        two=sorted([abs(sol[0]),abs(Vtwo(sol[0],sol[1],sol[2])),abs(sol[2])])
        three=sorted([abs(sol[0]),abs(sol[1]),abs(Vthree(sol[0],sol[1],sol[2]))])

        nodes=[]
    
        for node in [one,two,three]:
            if node not in nodes:
                nodes.append(node)      
    
        C=(sum(iterm(g[0],g[1])/2+term(g[0],g[1],g[2])/2 if g[0]==g[1] else iterm(g[0],g[1])+term(g[0],g[1],g[2]) for g in nodes))
        Cprev=0

        epsilon=10^(-8)
    
        while (abs(C-Cprev)>epsilon):
            Cprev=C
            newnodes=[]
            for n in nodes: 
                m=[n[0],n[2],Vtwo(n[0],n[1],n[2])]
                l=[n[1],n[2],Vone(n[0],n[1],n[2])]
                images=[]
                for i in [m,l]:
                    if i not in images:
                        images.append(i)
                        newnodes.append(i)
                        if i[0]==i[1]:
                            C=C+(term(i[0],i[1],i[2]))/2
                        else:
                            C=C+term(i[0],i[1],i[2])
            nodes=newnodes
        finalC=finalC+C
       

    #finalC=24*finalC

    #print(float(finalC))
    #print("the constant is", float(finalC), "and times 24 becomes", float(final))
    newdata=(k,float(finalC))
    data.append(newdata)

print(data)
plot = list_plot(data, marker='o', color='blue')
plot.show()
